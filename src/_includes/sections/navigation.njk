{# Settings ::::::::::::::::::::::::::::::::::::::::::::::::::: #}
{%- set nav = {       
      aria: 'header',
      background: '#000000',
      color: '#FFF',
      linkColor: '#FFF',
      padding: "2rem",
      justify: "flex-end",
      background: "black",
      color: "white",
      padding: "16px",
      maxWidth: "",
      justify: "space-between"
    }
-%}

{# Styles ::::::::::::::::::::::::::::::::::::::::::::::::::: #}
<style>
#navbar {
  --navbar-padding: {{ nav.padding }};
  --navbar-background: {{ nav.background }};
  --navbar-text-color: {{ nav.color }};
  --navbar-link-color: {{ nav.linkColor }};
  --nav-background: {{ nav.background }};
  --nav-max-width: {{ nav.maxWidth }};
  --nav-justify-content: {{ nav.justify }};
  --nav-padding: {{ nav.padding }};
  --nav-link-color: {{ nav.color }};
  --nav-menu-link-color: {{ nav.menu.color }};
  --nav-menu-link-fontSize: {{ nav.menu.fontSize }};
  --nav-menu-link-fontWeight: {{ nav.menu.fontWeight }};
  --nav-menu-gap: {{ nav.menu.gap }};
  --nav-menu-primary-align: {{ nav.menu.primary.align }};
  --nav-menu-secondary-align: {{ nav.menu.secondary.align }};
  --nav-menu-tertiary-align: {{ nav.menu.tertiary.align }};
  width:100%;
  background: var(--nav-background);
	padding: var(--navbar-padding) 0;
  background: var(--navbar-background) ;
}

#navbar * {
    color: var(--navbar-text-color);
}
#navbar a {
    color: var(--nav bar-link-color);
}

#navbar .navbar_wrapper {
    margin:0 auto;
    width:100%;
	  max-width: var(--theme-max-width, var(--nav-max-width));
    justify-content:var(--nav-justify-content, flex-end);
    display:flex;
    align-items:center;
    flex: 1;
	  padding: var(--nav-padding) 0;
}

#navbar .logo {
  flex: 1 64px auto;
}

#navbar .logo > h1 {
	margin: 0;
	padding: 0;
	font-size: 16px;
	color: white;
	white-space: nowrap;
}

#navbar .menuList {
	display: flex;
	align-items: center;
	gap: 1rem;
  flex: 2;
}

#navbar .menuList ul {
    width:100%;
    display:flex;
    align-items:center;
    margin:0;
    padding:0;
    gap:var(--nav-menu-gap, 8px);
}
#navbar .menuList ul:nth-child(1) {
  justify-content:var(--nav-menu-primary-align, flex-end);
}

#navbar .menuList ul:nth-child(2)  {
  justify-content:var(--nav-menu-secondary-align, flex-end);
}

#navbar .menuList ul:nth-child(3) {
  justify-content:var(--nav-menu-tertiary-align, flex-end);
}

#navbar .menuList  a {
	color: var(--nav-menu-link-color, #fff);
	font-size: var(--nav-menu-link-fontSize, 19px);
	font-weight: var(--nav-menu-link-fontWeight, 600);
}

#navbar .menuList {
    display: none;
}

@media(min-width: 768px) {
  #navbar .hamburger  {
    display: none;
  }
  #navbar .menuList {
    display: block;
  }
}

</style>


{# Template ::::::::::::::::::::::::::::::::::::::::::::::::::: #}
<nav id="navbar" role="navigation" aria-label="{{ nav.aria }}"
{% if nav.background or nav.color or nav.linkColor or nav.padding %}
  style="--nav-background: {{ nav.background }};--nav-text-color: {{ nav.color }}; --nav-link-color: {{ nav.linkColor }}; --nav-padding: {{ nav.padding }};
{% endif %}"

>
  <ul class="navbar_wrapper">
    <li class="logo">
      <h1>
        <a href="/">
          {% if logo.img %}
          <img src="logo.pg" alt="{{ site.name }}">
          {% else %}
          <span> {{ site.name }} </span>
          {% endif %}
        <a>
      </h1>
    </li>
    <li class="menuList">
      {% if menus.main %}
      <ul class="menu-1">
        {% for item in menus.main %}
          {% set relAttribute = '' %}
          {% set currentAttribute = '' %}
          {% if item.rel %}
            {% set relAttribute = ' rel="' + item.rel + '"' %}
          {% endif %}
          {% if page.url == item.url %}
            {% set currentAttribute = ' aria-current="page"' %}
          {% endif %}
          <li>
            <a href="{{ item.url }}"{{ relAttribute | safe }}{{ currentAttribute | safe }}>{{ item.text }}</a>
          </li>
        {% endfor %}
      </ul>
      {% endif %}
      {% if menus.secondary == false %}
      <ul class="menu-2">
        {% for item in menus.secondary %}
          {% set relAttribute = '' %}
          {% set currentAttribute = '' %}
          {% if item.rel %}
            {% set relAttribute = ' rel="' + item.rel + '"' %}
          {% endif %}
          {% if page.url == item.url %}
            {% set currentAttribute = ' aria-current="page"' %}
          {% endif %}
          <li>
            <a href="{{ item.url }}"{{ relAttribute | safe }}{{ currentAttribute | safe }}>{{ item.text }}</a>
          </li>
        {% endfor %}
      </ul>
      {% endif %}
      {% if menus.tertiary == false  %}
      <ul class="menu-3 ">
        {% for item in menus.tertiary %}
          {% set relAttribute = '' %}
          {% set currentAttribute = '' %}
          {% if item.rel %}
            {% set relAttribute = ' rel="' + item.rel + '"' %}
          {% endif %}
          {% if page.url == item.url %}
            {% set currentAttribute = ' aria-current="page"' %}
          {% endif %}
          <li>
            <a href="{{ item.url }}"{{ relAttribute | safe }}{{ currentAttribute | safe }}>{{ item.text }}</a>
          </li>
        {% endfor %}
      </ul>
      {% endif %}
    </li>
     <li class="hamburger">
        <button id="toggle" class="toggler" onclick="drawer.toggle()" aria-haspopup="true" aria-expanded="false">&#9776;</button>
    </li>
  </ul>

</nav> 

<eleventy-drawer id="drawer" ontoggle="state.textContent=event.open?'open':'closed'">
  <div class="drawer__header">
    <span>{{ site.name }}</span>
  </div>
  <nav class="drawer__menu">
   {% if menus.main %}
      <ul class="menu-1">
        {% for item in menus.main %}
          {% set relAttribute = '' %}
          {% set currentAttribute = '' %}
          {% if item.rel %}
            {% set relAttribute = ' rel="' + item.rel + '"' %}
          {% endif %}
          {% if page.url == item.url %}
            {% set currentAttribute = ' aria-current="page"' %}
          {% endif %}
          <li>
            <a href="{{ item.url }}"{{ relAttribute | safe }}{{ currentAttribute | safe }}>{{ item.text }}</a>
          </li>
        {% endfor %}
      </ul>
      {% endif %}
  </nav>
</eleventy-drawer>

<script>
  let template;
  function html(statics) {
    if (!template) template = document.createElement("template");
    template.innerHTML = statics.join("");
    const frag = document.createDocumentFragment();
    let child = (template.content || template).firstElementChild;
    while (child) {
      const next = child.nextElementSibling;
      frag.appendChild(child);
      child = next;
    }
    return () => frag.cloneNode(true);
  }
  const TEMPLATE = html`
    <aside><slot name="header"></slot><slot></slot></aside>
    <div><slot name="backdrop"></slot></div>
    <style>
      :host {
        touch-action: none;
        overflow: visible;
        --width: 200px;
        --max-width: 100;
        --background: #eee;
        --backdrop: rgba(0, 0, 0, 0.5);
      }

      :host > div {
        position: fixed;
        left: 0;
        top: 0;
        width: 100vw;
        height: 100vh;
        opacity: var(--percent, 0);
        background: var(--backdrop);
        transition: opacity 300ms ease;
        pointer-events: none;
        z-index: 999;
      }

      :host > aside {
        position: fixed;
        left: calc(-1 * var(--width, 200px));
        top: 0;
        width: var(--width, 200px);
        max-width: calc(1vw * var(--max-width, 100));
        height: 100vh;
        background: var(--background, #fff);
        transition: transform 200ms cubic-bezier(0, 0, 0.5, 1);
        z-index: 1000;
        transform: translateX(var(--tf-x, 0));
      }

      :host([align="right"]) > aside {
        left: auto;
        right: 0;
      }
      :host([align="bottom"]) > aside {
        bottom: 0;
        top: auto;
      }
      :host([align*="to"]) > aside {
        height: var(--width, 200px);
        max-height: calc(1vh * var(--max-width, 100));
        max-width: none;
        width: 100vw;
      }

      :host([open]) > aside {
        transform: translateX(var(--tf-x, var(--width, 200px)));
      }
      :host([open]) > div {
        pointer-events: auto;
        opacity: 1;
      }
    </style>
  `;
  class eleventyDrawer extends HTMLElement {
    constructor() {
      super();
      this.animating = false;

      const shadow = this.attachShadow({ mode: "open" });
      shadow.appendChild(TEMPLATE());

      const drawer = shadow.firstChild;

      const done = () => {
        this.animating = false;
        const evt = new Event("toggle");
        // @todo: worth just going with .detail here?
        evt.open = evt.detail = this.open;
        console.log(evt.open);
        this.dispatchEvent(evt);
      };

      drawer.addEventListener("transitionend", (e) => {
        if (e.target === drawer) done();
      });

      
      this.addEventListener("click", (e) => {
        // ignore clicks generated from swipe dismissal
        if (lastDragEnd && Date.now() - lastDragEnd < 50) return;
        let child = e.target;
        let autoclose = this.autoclose;
        while (child && child !== this) {
          if (child.hasAttribute("autoclose")) {
            autoclose = child.getAttribute("autoclose") !== "false";
          }
          child = child.parentNode;
        }
        if (autoclose) {
          this._closeTimer = setTimeout(this.close.bind(this));
        }
      });

      const coords = (e) => ({ id: e.pointerId, x: e.pageX, y: e.pageY });
      let events = [];
      let down;
      let start;
      let prev;
      let startX;
      let startUserSelect;
      let startTouchAction;
      let preventClick;
      let lastDragEnd;
      const preventDefault = (e) => {
        e.preventDefault();
        e.stopPropagation();
      };
      this.addEventListener("dragstart", preventDefault);
      addEventListener("pointerdown", (e) => {
        if (e.button) return;
        down = coords(e);
        start = null;
      });
      addEventListener("pointermove", (e) => {
        if (!down) return;
        const cur = coords(e);
        if (cur.id !== down.id) return;
        if (!start) {
          const delta = cur.x - down.x;
          if (Math.abs(delta) < 5) return;
          if (Math.abs(cur.y - down.y) >= 6) return cancel();
          if (this.open) preventClick = true;
          if (this.open && delta > 0) return;
          if (!this.open && delta < 0) return;
          start = cur;
          // @todo: Y
          const transform = getComputedStyle(drawer).transform;
          const tf = transform.match(/([^,]+),([^,]+)\)/);
          startX = (tf && parseFloat(tf[1])) || 0;
          drawer.style.transition = "none";
          backdrop.style.transition = "none";
          if (drawer.setPointerCapture) {
            drawer.setPointerCapture(e.pointerId);
          }
          startUserSelect = document.body.style.userSelect;
          startTouchAction = document.body.style.touchAction;
          document.body.style.userSelect = document.body.style.touchAction =
            "none";
        }
        if (events.push(cur) > 5) events.shift(events);
        let x = startX + cur.x - start.x;
        x = Math.max(0, Math.min(x, this.width || 200));

        drawer.style.setProperty("--tf-x", x + "px");
        this.style.setProperty("--percent", x / (this.width || 200));

        prev = cur;
        preventDefault(e);
      });
      addEventListener("pointerup", (e) => {
        if (!down) return;
        if (start) {
          drawer.style.setProperty("--tf-x", "");
          this.style.setProperty("--percent", "");
          drawer.style.transition = backdrop.style.transition = "";
          document.body.style.userSelect = startUserSelect;
          document.body.style.touchAction = startTouchAction;
        }
        if (start || preventClick) {
          lastDragEnd = Date.now();
        }
        if (prev && events.length > 4) {
          const delta = prev.x - events[0].x;
          this.open = delta > 0;

          // if there isn't going to be an animation to done state, trigger it now:
          let x = startX + prev.x - start.x;
          if (x <= 0 || x >= (this.width || 200)) done();

          preventDefault(e);
        }
        cancel();
      });

      const cancel = () => {
        events.length = 0;
        down =
          prev =
          start =
          startX =
          startUserSelect =
          startTouchAction =
          preventClick =
            null;
      };

      const backdrop = drawer.nextSibling;
      backdrop.addEventListener("click", this.close.bind(this));
    }

    connectedCallback() {}

    get open() {
      return this.hasAttribute("open");
    }
    set open(value) {
      this.animating = true;
      clearTimeout(this._closeTimer);
      if (value) this.setAttribute("open", "");
      else this.removeAttribute("open");
    }

    close() {
      this.open = false;
    }

    toggle(forceState) {
      if (typeof forceState !== "boolean") {
        forceState = !this.isOpen;
      }
      this.open = forceState;
    }

    get autoclose() {
      return this.hasAttribute("autoclose");
    }
    set autoclose(value) {
      if (value) this.setAttribute("autoclose", "");
      else this.removeAttribute("autoclose");
    }
  }
  customElements.define("eleventy-drawer", eleventyDrawer);
</script>